
kubectl version
kubectl get nodes
kubectl describe nodes <podname>

create or update an object
==========================
kubectl create -f pod1.yaml (or)
kubectl apply -f pod1.yaml

get the list of the pod objectives available
============================================
kubectl get pods
kubectl get pods -o wide
kubectl get pods --all-namespaces
kubectl describe pod <podname> or kubectl describe pod/<podname>


get the deatials of the pod object
==================================
kubectl describe pod <podname>

get running logs from the container inside the pod object
=========================================================
kubectl logs -f <podname>
kubectl logs -f <podname> -c <conatainername>


run OS commands in an existing pod (1 container pod)
====================================================
kubectl exec <podname> -- <OScommand>
kubectl exec testpod2 -- hostname -i

run OS commands in an existing conatainer (multi container pos)
===============================================================
kubectl exec <podname> -c <containername> -- <OScommand>
kubectl exec testpod3 -c c00 -- hostname -i

attach to the running container interactively
=============================================
kubectl exec <podname> -i -t -- /bin/bash (or)
kubectl attach <podname> -i 

delete a pod
============
kubectl delete pods <podname> (or)
kubectl delete -f <YAML>

kubectl apply -f podlables.yaml

to see list of pods available with details if any attached to it
================================================================
kubectl get pods --show-labels

add a label to an existing pod
==============================
kubectl label pods <podname> <labelkey>=<value>

list pods matching a label
==========================
kubectl get pods -l <label>=<value>

we can also delete pods based on label selection
================================================
kubectl delete pods -l <label>=<value>


================
label selectors:
================

Equality based requiremnt: (= , !=)

	environment = production
	tier != frontend

set based requirement: (in, notin and exists)
	environment in (production, qa)
	tier notin (frontend, backend)


k8s also support set-based selectors i.e match multiple values
==============================================================
kubectl get pods -l 'label in (value1, value2)'
kubectl get pods -l 'env in (development, testing)'

list pods matching multiples values
===================================
kubectl get pods -l environment=testing, tier=frontend



======================
Replication Controller
======================

kubectl apply -f rc.yaml
kubectl get pods --show-lables
kubectl get pods -l myname=Ghouse
kubectl get rc

Delete the pod & RC will recreate it
====================================
kubectl delete pods <podname>
kubectl describe rc <replicationcontrollername>

Scale Replicas
==============
kubectl scale --replicas=<num> rc/<replicationcontrollername> (or)
kubectl scale --replicas=(num) <resourcetype> -l <key>=<value>
kubectl scale --replicas=3 rc -l myname=Ghouse

Delete Replicationcontroller
============================
kubectl delete rc <replicationcontrollername>

====================================
kubectl apply -f emptyDir.yaml
kubectl describe pods myvolemptydir


create a file in c1 container
=============================
kubectl exec myvolemptydir -c c1 -i -t -- bash
	echo "Testing" >/tmp/xchange/test

kubectl exec myvolemptydir -c c2 -i -t -- bash
	cat /tmp/xchange/test
	mount|grep "/tmp/data"
